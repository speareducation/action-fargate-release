name: Fargate Release
description: Performs a docker build, pushes to ECR, and performs an ECS release.

inputs:
  ecr-repo:
    description: The ECR Repo name without the ECR Registry portion.
    required: true
  app-env:
    description: The APP_ENV (use action-build-vars.appEnv)
    required: true
  release:
    description: The release tag (action-build-vars.release)
    required: true
  task-definition:
    description: The path to the task definiton
    required: true
  task-container:
    description: The container within the task to use
    default: web-container
    required: false
  service:
    description: The ECS/Fargate Service name
    required: true

runs:
  using: composite
  env:
    ECR_REPO: ${{ inputs.ecr-repo }}
    APP_ENV: ${{ inputs.app-env }}

  steps:

      - id: docker-build
        name: Docker Build
        shell: bash
        run: docker build -t ${{ inputs.ecr-repo }} .

      - id: ecr-login
        name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1

      - id: ecr-upload
        name: Tag and upload the image
        shell: bash
        env:
          APP_ENV: ${{ inputs.app-env }}
          RELEASE: ${{ inputs.release }}
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          docker tag $ECR_REPO:latest $ECR_REGISTRY/$ECR_REPO:$APP_ENV-$RELEASE
          docker tag $ECR_REPO:latest $ECR_REGISTRY/$ECR_REPO:$APP_ENV-latest
          docker push $ECR_REGISTRY/$ECR_REPO:$APP_ENV-$RELEASE
          docker push $ECR_REGISTRY/$ECR_REPO:$APP_ENV-latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPO:$APP_ENV-$RELEASE"

      - id: task-def
        name: Fill in the new image ID in the Amazon ECS task definition
        if: inputs.app-env != 'sandbox'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.task-definition }}
          container-name: ${{ inputs.task-container }}
          image: ${{ steps.ecr-upload.outputs.image }}

      - name: Deploy Amazon ECS task definition
        if: inputs.app-env != 'sandbox'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service }}
          cluster: spear-core-${{ inputs.app-env }}
          wait-for-service-stability: true
